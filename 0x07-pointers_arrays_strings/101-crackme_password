#include "main.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <openssl/md5.h>

#define PASSWORD_LENGTH 16

int main(int argc, char **argv) {
    if (argc != 2) {
        printf("Usage: %s <password_file>\n", argv[0]);
        return 1;
    }

    unsigned char password[PASSWORD_LENGTH];
    memset(password, 0, PASSWORD_LENGTH);

    // Use ltrace to find the MD5 hash of the password
    FILE *fp = popen("ltrace -s 100 ./crackme2 2>&1 | grep MD5 | awk '{print $NF}'", "r");
    if (fp == NULL) {
        perror("popen");
        return 1;
    }

    char md5hash[MD5_DIGEST_LENGTH * 2 + 1];
    memset(md5hash, 0, sizeof(md5hash));
    fgets(md5hash, sizeof(md5hash), fp);

    pclose(fp);

    // Use objdump to find the password bytes in the executable
    fp = popen("objdump -d ./crackme2 | grep -E 'mov.*password' | awk '{print $2}'", "r");
    if (fp == NULL) {
        perror("popen");
        return 1;
    }

    char password_str[PASSWORD_LENGTH * 2 + 1];
    memset(password_str, 0, sizeof(password_str));
    fgets(password_str, sizeof(password_str), fp);

    pclose(fp);

    // Convert the password bytes to a string
    for (int i = 0; i < PASSWORD_LENGTH * 2; i += 2) {
        sscanf(password_str + i, "%2hhx", &password[i / 2]);
    }

    // Compute the MD5 hash of the password
    unsigned char md5hash_computed[MD5_DIGEST_LENGTH];
    MD5(password, PASSWORD_LENGTH, md5hash_computed);

    // Compare the computed hash with the original hash
    if (strncmp(md5hash, md5hash_computed, MD5_DIGEST_LENGTH * 2) != 0) {
        printf("Failed to compute password\n");
        return 1;
    }

    // Write the password to the output file
    FILE *fout = fopen(argv[1], "w");
    if (fout == NULL) {
        perror("fopen");
        return 1;
    }

    fwrite(password, 1, PASSWORD_LENGTH, fout);
    fclose(fout);

    return 0;
}
